<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Welcome !</title>
    <link>https://neonkid.github.io/categories/android/</link>
    <description>Recent content in Android on Welcome !</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <copyright>Copyright (c) 2017, Neon K.I.D; all rights reserved.</copyright>
    <lastBuildDate>Sun, 01 Oct 2017 13:27:19 +0900</lastBuildDate>
    
	<atom:link href="https://neonkid.github.io/categories/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Android 에서 MQTT를 사용하는 방법</title>
      <link>https://neonkid.github.io/post/android/2017-10-01-android-%EC%97%90%EC%84%9C-mqtt-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90/</link>
      <pubDate>Sun, 01 Oct 2017 13:27:19 +0900</pubDate>
      
      <guid>https://neonkid.github.io/post/android/2017-10-01-android-%EC%97%90%EC%84%9C-mqtt-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90/</guid>
      <description>안녕하세요. 요즘 취업 시즌이 한창이다보니, 블로그에 글쓰는게 또 게을러지게 되었네요. ㅜㅜ
오늘은 지난 포스트에 이어서, 프로그래밍 코드를 이용한 MQTT 메시지 교환 - 안드로이드 편을 포스트하고자 합니다.
혹시 아직 MQTT에 대한 개념이나, Broker를 설치하지 않으신 분들은 아래 링크를 통해, 이전 글을 반드시 구독해주신 후, 이 포스트를 참조하시기 바랍니다.
http://blog.neonkid.xyz/127
Eclipse Paho MQTT 프로토콜을 사용해 메시지 교환을 하기 위해서는 MQTT 통신이 가능한 라이브러리가 필요합니다. 그 중에서도 저희는 Java와 아주 궁합이 좋은 Eclipse Paho를 사용하고자 합니다.</description>
    </item>
    
    <item>
      <title>Android CustomView를 만들어보자</title>
      <link>https://neonkid.github.io/post/android/2017-08-01-android-custom-view-%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90/</link>
      <pubDate>Tue, 01 Aug 2017 20:30:20 +0900</pubDate>
      
      <guid>https://neonkid.github.io/post/android/2017-08-01-android-custom-view-%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90/</guid>
      <description>벌써 8월이 시작됐네요. 올해 장마는 무척 길었던 것 같습니다.
오늘은 안드로이드의 CustomView를 제작하는 간단한 방법을 적어보고자 합니다.
저는 사실 디자인에 많이 약합니다. 제가 현재 맡고 있는 졸업 작품에서도 클라이언트로 안드로이드 앱 개발을 담당하고 있지만, 앱 디자인에 코드를 여러 번 뜯어고쳤습니다. 처음에는 그다지 디자인에 많이 신경도 쓰지 않았고, Android, android-support, material design에서 기본적으로 제공해주는 View, Widget을 가져다가 쓰는 것이 전부이고, 그 이상은 생각하지 않았습니다.
하지만 제가 보기에도 제가 만든 앱의 디자인이 정말 초라하게 느껴집니다.</description>
    </item>
    
    <item>
      <title>Android, 다른 쓰레드에서 UI 처리를 하는 방법</title>
      <link>https://neonkid.github.io/post/android/2017-06-23-android-%EB%8B%A4%EB%A5%B8-%EC%93%B0%EB%A0%88%EB%93%9C%EC%97%90%EC%84%9C-ui-%EC%B2%98%EB%A6%AC%EB%A5%BC-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/</link>
      <pubDate>Fri, 23 Jun 2017 01:20:40 +0900</pubDate>
      
      <guid>https://neonkid.github.io/post/android/2017-06-23-android-%EB%8B%A4%EB%A5%B8-%EC%93%B0%EB%A0%88%EB%93%9C%EC%97%90%EC%84%9C-ui-%EC%B2%98%EB%A6%AC%EB%A5%BC-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/</guid>
      <description>오늘 포스트는 어제에 이어서, 쓰레드에 대한 이야기를 계속해보려 합니다.
아무래도 UI 프로그래밍에 대한 이야기다보니, UI 프로그래밍에 많이 유명하다고 생각되는 Windows 쪽의 이야기를 많이 섞어보자 합니다. 읽으실 때, 이해가 조금 안되시는 부분도 있을테니 참고하시기 바랍니다.
UI 리소스를 Sub Thread에서 직접 사용할 경우. 안드로이드 앱에는 UI가 존재합니다. UI라고 하는 것은 사용자들이 터치하는 버튼, 텍스트 박스 등의 컴포넌트를 말하는데요. 주로 간단한 애플리케이션에서는 이 UI를 메인 쓰레드에서 처리합니다.
하지만 앱이 커지게 되면, 쓰레드가 생기게 될 수 있고, 해당 쓰레드에서 UI를 처리할 수도 있습니다.</description>
    </item>
    
    <item>
      <title>Android AIDL 을 사용한 Activity 와 Service 통신</title>
      <link>https://neonkid.github.io/post/android/2017-06-22-android-aidl-%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-activity-%EC%99%80-service-%ED%86%B5%EC%8B%A0/</link>
      <pubDate>Thu, 22 Jun 2017 02:15:40 +0900</pubDate>
      
      <guid>https://neonkid.github.io/post/android/2017-06-22-android-aidl-%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-activity-%EC%99%80-service-%ED%86%B5%EC%8B%A0/</guid>
      <description>안녕하세요. 처음으로 Android 포스트를 쓰게 되었네요. 안드로이드 포스트를 커리큘럼별로 포스팅을 해볼까 라는 생각도 했었지만, 커리큘럼에 대한 내용은 다른 블로그에서도 많이 찾아볼 수 있는 내용이고 또 어렵지 않은 내용이기에 커리큘럼이기 보다는 자주 사용하면서도 쉽게 이해하기 어려운 부분을 정리해보고자 처음 포스트를 AIDL로 삼게 되었습니다.
AIDL ? AIDL은 Android Interface Definition Language의 약자로, 인터페이스를 정의한 언어입니다. 본래는 Android IDL은 Corba의 IDL 기능을 그대로 묘사한 것이며 RPC 통신할 때 많이 사용합니다. 우리가 이 포스트에서 다룰 주제도, Activity와 Service 간의 통신으로 프로세스 간의 통신을 구현하기 위한 목적으로 사용합니다.</description>
    </item>
    
  </channel>
</rss>